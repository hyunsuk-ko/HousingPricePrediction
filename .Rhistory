p13 <- ggplot(house, aes(x = sqft_lot15, y = price)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Sqft Lot15", y = "Price", title = "A Scatterplot of Sqft Lot 15 vs Price")
ggarrange(p12, p13,
labels = c("A", "B"),
ncol = 1, nrow = 2)
mydata.cor <- cor(house)
palette = colorRampPalette(c("green", "white", "red")) (20)
heatmap(x = mydata.cor, col = palette, symm = TRUE, main = "A Heatmap of All Columns")
set.seed(1) ##for reproducibility to get the same split
sample<-sample.int(nrow(house), floor(.80*nrow(house)), replace = F)
train<-house[sample, ] ##training data frame
test<-house[-sample, ] ##test data frame
head(train)
regnull <- lm(price ~ 1, data = train)
regfull <- lm(price ~ ., data = train)
step(regnull, scope = list(lower = regnull, upper = regfull), direction = "both")
step(regnull, scope=list(lower=regnull, upper=regfull), direction="forward")
step(regfull, scope=list(lower=regnull, upper=regfull), direction="backward")
result <- lm(price ~ bedrooms + bathrooms + floors + waterfront + view + condition + grade + yr_built + sqft_living +
sqft_living15 + sqft_lot15 + renovated, data = train)
summary(result)
test$predict <- round(predict(result, newdata = test))
test_mse_ln <- mean((test$price - test$predict)^2)
test_mse_ln
library(faraway)
vif(result)
yhat <- result$fitted.values
res <- result$residuals
Data <- data.frame(train, yhat, res)
ggplot(Data, aes(x=yhat,y=res))+
geom_point()+
geom_hline(yintercept=0, color="red")+
labs(x="Fitted y",
y="Residuals",
title="Residual Plot")
acf(res)
qqnorm(res)
qqline(res, col="red")
library(MASS)
boxcox(result,lambda = seq(-1.,1,0.5))
train <- train %>% mutate(price = price^0.1)
result2 <- lm(price ~ bedrooms + bathrooms + floors + waterfront + view + condition + grade + yr_built + sqft_living +
sqft_living15 + sqft_lot15 + renovated, data = train)
summary(result2)
yhat<-result2$fitted.values
res<-result2$residuals
Data<-data.frame(train,yhat,res)
ggplot(Data, aes(x=yhat,y=res))+
geom_point()+
geom_hline(yintercept=0, color="red")+
labs(x="Fitted y",
y="Residuals",
title="Residual Plot")
acf(res)
qqnorm(res)
qqline(res, col="red")
test$predict <- round(predict(result2, newdata = test) ^ 10, 3)
test_mse_ln_2 <- mean((test$price - test$predict)^2)
test_mse_ln_2
head(test)
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(fig.width=10, fig.height=7.5)
rm(list = ls())
library(tidyverse)
library(dplyr)
library(GGally)
# install.packages("ggpubr")
library(ggpubr)
house <- read.csv('kc_house_data.csv')
head(house)
house <- house %>% dplyr::select(-id, -date, -lat, -long, -zipcode)
head(house)
x <- unique(house$yr_renovated)
hist(house$yr_renovated)
is.null(house)
col_order <- c("price", "bedrooms", "bathrooms", "floors", "waterfront", "view", "condition", "grade", "yr_built",
"yr_renovated", "sqft_living", "sqft_lot", "sqft_living15", "sqft_lot15")
house <- house[, col_order]
head(house)
house$bathrooms <- round(house$bathrooms)
house_1 <- house %>% dplyr::select(price, bedrooms, bathrooms, floors)
ggpairs(house_1)
p1 <- ggplot(house, aes(x = as.factor(bedrooms), y = price, fill = as.factor(bedrooms))) +
geom_boxplot() +
labs(x = "Number of Bedrooms", y = "Price", title = "Price by Number of Bedrooms", fill = "Bedrooms")
p2 <- ggplot(house, aes(x = as.factor(bathrooms), y = price, fill = as.factor(bathrooms))) +
geom_boxplot() +
labs(x = "Number of Bathrooms", y = "Price", title = "Price by Number of Bathrooms", fill = "Bathrooms")
p3 <- ggplot(house, aes(x = as.factor(floors), y = price, fill = as.factor(floors))) +
geom_boxplot() +
labs(x = "Number of Floors", y = "Price", title = "Price by Number of Floors", fill = "Floors")
ggarrange(p1, p2, p3,
labels = c("A", "B", "C"),
ncol = 1, nrow = 3)
house_2 <- house %>% dplyr::select(waterfront, view, condition, price)
ggpairs(house_2)
p4 <- ggplot(house, aes(x = as.factor(waterfront), y = price, fill = as.factor(waterfront))) +
geom_boxplot() +
labs(x = "Waterfront", y = "Price", title = "Price by with / without waterfront", fill = "Waterfront")
p5 <- ggplot(house, aes(x = as.factor(view), y = price, fill = as.factor(view))) +
geom_boxplot() +
labs(x = "View", y = "Price", title = "Price by View", fill = "View")
p6 <- ggplot(house, aes(x = as.factor(condition), y = price, fill = as.factor(condition))) +
geom_boxplot() +
labs(x = "Condition", y = "Price", title = "Price by Condition", fill = "Condition")
ggarrange(p4, p5, p6,
labels = c("A", "B", "C"),
ncol = 1, nrow = 3)
house$yr_built <- case_when(
(1900 <= house$yr_built) &  (house$yr_built< 1920) ~ 0,
(1920 <= house$yr_built) &  (house$yr_built< 1940) ~ 1,
(1940 <= house$yr_built) &  (house$yr_built< 1960) ~ 2,
(1960 <= house$yr_built) &  (house$yr_built< 1980) ~ 3,
(1980 <= house$yr_built) &  (house$yr_built< 2000) ~ 4,
(2000 <= house$yr_built) ~ 5)
house$renovated <- ifelse(house$yr_renovated != 0, 1, 0)
house <- house %>% dplyr::select(-yr_renovated)
house_3 <- house %>% dplyr::select(grade, yr_built, renovated, price)
ggpairs(house_3)
p7 <- ggplot(house, aes(x = as.factor(grade), y = price, fill = as.factor(grade))) +
geom_boxplot() +
labs(x = "Grade", y = "Price", title = "Price by Grade", fill = "Grade")
p8 <- ggplot(house, aes(x = as.factor(yr_built), y = price, fill = as.factor(yr_built))) +
geom_boxplot() +
labs(x = "Year built", y = "Price", title = "Price by Year built", fill = "Year built")
p9 <- ggplot(house, aes(x = as.factor(renovated), y = price, fill = as.factor(renovated))) +
geom_boxplot() +
labs(x = "Renovated", y = "Price", title = "Price by Renovated", fill = "Renovated")
ggarrange(p7, p8, p9,
labels = c("A", "B", "C"),
ncol = 1, nrow = 3)
house_4 <- house %>% dplyr::select(sqft_living, sqft_lot, price)
ggpairs(house_4)
p10 <- ggplot(house, aes(x = sqft_living, y = price)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Sqft Living", y = "Price", title = "A Scatterplot of Sqft Living vs Price")
p11 <- ggplot(house, aes(x = sqft_lot, y = price)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Sqft Lot", y = "Price", title = "A Scatterplot of Sqft Lot vs Price")
ggarrange(p10, p11,
labels = c("A", "B"),
ncol = 1, nrow = 2)
house_5 <- house %>% dplyr::select(sqft_living15, sqft_lot15, price)
ggpairs(house_5)
p12 <- ggplot(house, aes(x = sqft_living15, y = price)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Sqft Living15", y = "Price", title = "A Scatterplot of Sqft Living 15 vs Price")
p13 <- ggplot(house, aes(x = sqft_lot15, y = price)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Sqft Lot15", y = "Price", title = "A Scatterplot of Sqft Lot 15 vs Price")
ggarrange(p12, p13,
labels = c("A", "B"),
ncol = 1, nrow = 2)
mydata.cor <- cor(house)
palette = colorRampPalette(c("green", "white", "red")) (20)
heatmap(x = mydata.cor, col = palette, symm = TRUE, main = "A Heatmap of All Columns")
set.seed(1) ##for reproducibility to get the same split
sample<-sample.int(nrow(house), floor(.80*nrow(house)), replace = F)
train<-house[sample, ] ##training data frame
test<-house[-sample, ] ##test data frame
head(train)
regnull <- lm(price ~ 1, data = train)
regfull <- lm(price ~ ., data = train)
step(regnull, scope = list(lower = regnull, upper = regfull), direction = "both")
step(regnull, scope=list(lower=regnull, upper=regfull), direction="forward")
step(regfull, scope=list(lower=regnull, upper=regfull), direction="backward")
result <- lm(price ~ bedrooms + bathrooms + floors + waterfront + view + condition + grade + yr_built + sqft_living +
sqft_living15 + sqft_lot15 + renovated, data = train)
summary(result)
test$predict <- round(predict(result, newdata = test) ^ 10, 3)
head(test)
test_mse_ln <- mean((test$price - test$predict)^2)
test_mse_ln
library(faraway)
vif(result)
yhat <- result$fitted.values
res <- result$residuals
Data <- data.frame(train, yhat, res)
ggplot(Data, aes(x=yhat,y=res))+
geom_point()+
geom_hline(yintercept=0, color="red")+
labs(x="Fitted y",
y="Residuals",
title="Residual Plot")
acf(res)
qqnorm(res)
qqline(res, col="red")
library(MASS)
boxcox(result,lambda = seq(-1.,1,0.5))
train <- train %>% mutate(price = price^0.1)
result2 <- lm(price ~ bedrooms + bathrooms + floors + waterfront + view + condition + grade + yr_built + sqft_living +
sqft_living15 + sqft_lot15 + renovated, data = train)
summary(result2)
yhat<-result2$fitted.values
res<-result2$residuals
Data<-data.frame(train,yhat,res)
ggplot(Data, aes(x=yhat,y=res))+
geom_point()+
geom_hline(yintercept=0, color="red")+
labs(x="Fitted y",
y="Residuals",
title="Residual Plot")
acf(res)
qqnorm(res)
qqline(res, col="red")
test$predict <- round(predict(result2, newdata = test) ^ 10)
test_mse_ln_2 <- mean((test$price - test$predict)^2)
test_mse_ln_2
head(test)
yhat<-result2$fitted.values
res<-result2$residuals
Data<-data.frame(train,yhat,res)
ggplot(Data, aes(x=yhat,y=res))+
geom_point()+
geom_hline(yintercept=0, color="red")+
labs(x="Fitted y",
y="Residuals",
title="Residual Plot")
acf(res)
qqnorm(res)
qqline(res, col="red")
test$predict <- round(predict(result2, newdata = test) ^ 10)
test_mse_ln_2 <- mean((test$price - test$predict)^2)
test_mse_ln_2
tail(test)
n <- nrow(train)
p <- 13
cv <- qt(1-0.05,(2*n), n-1-p)
res <- result2$residuals
standard.res<- res/summary(result2)$sigma
student.res <- rstandard(result2)
ext.student.res <- rstudent(result2)
ext.student.res[abs(ext.student.res)>crit]
n <- nrow(train)
p <- 13
cv <- qt(1-0.05,(2*n), n-1-p)
res <- result2$residuals
standard.res<- res/summary(result2)$sigma
student.res <- rstandard(result2)
ext.student.res <- rstudent(result2)
ext.student.res[abs(ext.student.res)>cv]
res.frame<-data.frame(res,standard.res,
student.res,ext.student.res)
par(mfrow=c(1,3))
plot(result2$fitted.values,standard.res,
main="Standardized Residuals",
ylim=c(-4.5,4.5))
plot(result2$fitted.values,student.res,
main="Studentized Residuals",
ylim=c(-4.5,4.5))
plot(result2$fitted.values,ext.student.res,
main="Externally  Studentized Residuals",
ylim=c(-4.5,4.5))
n <- nrow(train)
p <- 13
cv <- qt(1-0.05,(2*n), n-1-p)
res <- result2$residuals
standard.res<- res/summary(result2)$sigma
student.res <- rstandard(result2)
ext.student.res <- rstudent(result2)
ext.student.res[abs(ext.student.res)>cv]
res.frame<-data.frame(res,standard.res,
student.res,ext.student.res)
res.frame
n <- nrow(train)
p <- 13
cv <- qt(1-0.05,(2*n), n-1-p)
res <- result2$residuals
standard.res<- res/summary(result2)$sigma
student.res <- rstandard(result2)
ext.student.res <- rstudent(result2)
ext.student.res[abs(ext.student.res)>cv]
res.frame<-data.frame(res,standard.res,
student.res,ext.student.res)
# leverage
lev <- lm.influence(result2)$hat
# identify high leverage points
lev[lev > 2 * p / n]
# leverage
lev <- lm.influence(result2)$hat
# identify high leverage points
x <- lev[lev > 2 * p / n]
lenght(x)
# leverage
lev <- lm.influence(result2)$hat
# identify high leverage points
x <- lev[lev > 2 * p / n]
length(x)
# leverage
lev <- lm.influence(result2)$hat
# identify high leverage points
x <- lev[lev > 2 * p / n]
length(x) / n
boxplot(train$price)
head(train)
# COOK's Distance
COOKS<-cooks.distance(result2)
y <- COOKS[COOKS>qf(0.5,p,n-p)]
length(y)
# DFFITS (Difference in Fits)
DFFITS <- dffits(result2)
length(DFFITS[abs(DFFITS)>2*sqrt(p/n)])
# DFBETAS (Difference in Betas)
DFBETAS<- dfbetas(result2)
abs(DFBETAS) > 2/sqrt(n)
# DFBETAS (Difference in Betas)
DFBETAS<- dfbetas(result2)
DFBETAS[abs(DFBETAS[,1])>2/sqrt(n),1]
# DFFITS (Difference in Fits)
DFFITS <- dffits(result2)
z <- (DFFITS[abs(DFFITS)>2*sqrt(p/n)])
z
z[1]
z[1][1]
data.frame(z)
data.frame(z)
rownames(data.frame(z))
for (i in indices) {
print(i)
}
data.frame(z)
indices <- rownames(data.frame(z))
for (i in indices) {
print(i)
}
head(train)
head(train)
train[rownames(train) == 17401]
head(train)
rownames(head(train))
#train %>% filter(rowname)
#train[rownames(train) == 17401]
head(train)
rownames(head(train))
train %>% filter(rownames(head(train)) == 17401)
head(train)
rownames(head(train))
head(train) %>% filter(rownames(head(train)) == 17401)
#train[rownames(train) == 17401]
train2 <- train
for (i in indices) {
train2 <- train2 %>% filter(rownames(train2) != i)
}
length(train2)
train2
train2
nrow(train) - nrow(train2) == length(indices)
train2
nrow(train) - nrow(train2)
length(indices)
length(unique(indices))
nrow(train) - nrow(train2)
length(indices)
train2 <- train
train2
#for (i in indices) {
#  train2 <- train2 %>% filter(rownames(train2) != i)
#}
#nrow(train2)
head(train)
rownames(head(train))
head(train) %>% filter(rownames(head(train)) != 17401)
#train[rownames(train) == 17401]
train2 <- train
train2$indices <- rownames(train2)
train2
#for (i in indices) {
#  train2 <- train2 %>% filter(rownames(train2) != i)
#}
#nrow(train2)
train2 <- train
train2$indices <- rownames(train2)
#train2
for (i in indices) {
train2 <- train2 %>% filter(indices != i)
}
nrow(train2)
length(unique(indices))
nrow(train) - nrow(train2)
length(indices)
train2
indices[:3]
indices[1:3]
train2
indices[1:3]
train2 %>% filter(indices == 18183)
indices[1:3]
train2 %>% filter(indices == 20728)
result3 <- lm(price ~ bedrooms + bathrooms + floors + waterfront + view + condition + grade + yr_built + sqft_living +
sqft_living15 + sqft_lot15 + renovated, data = train)
summary(result3)
result3 <- lm(price ~ bedrooms + bathrooms + floors + waterfront + view + condition + grade + yr_built + sqft_living +
sqft_living15 + sqft_lot15 + renovated, data = train2)
summary(result3)
yhat<-result3$fitted.values
res<-result3$residuals
Data<-data.frame(train2,yhat,res)
ggplot(Data, aes(x=yhat,y=res))+
geom_point()+
geom_hline(yintercept=0, color="red")+
labs(x="Fitted y",
y="Residuals",
title="Residual Plot")
acf(res)
qqnorm(res)
qqline(res, col="red")
test$predict <- round(predict(result2, newdata = test) ^ 10)
test_mse_ln_3 <- mean((test$price - test$predict)^2)
test_mse_ln_3
test_mse_ln_1 > test_mse_ln_2
test_mse_ln > test_mse_ln_2
test_mse_ln_2 > test_mse_ln_3
head(test)
result <- lm(price ~ bedrooms + bathrooms + floors + waterfront + view + condition + grade + yr_built + sqft_living +
sqft_living15 + sqft_lot15 + renovated, data = train)
summary(result)
test$predict <- round(predict(result, newdata = test) ^ 10)
test_mse_ln <- mean((test$price - test$predict)^2)
test_mse_ln
summary(result)$r.squared
summary(result)$adj.r.squared
PRESS <- function(linear.model) {
## get the residuals from the linear.model. ## extract hat from lm.influence to obtain the leverages
pr <- residuals(linear.model)/(1-lm.influence(linear.model)$hat)
## calculate the PRESS by squaring each term and adding them up
PRESS <- sum(prˆ2)
return(PRESS)
}
PRESS(result)
result <- lm(price ~ bedrooms + bathrooms + floors + waterfront + view + condition + grade + yr_built + sqft_living +
sqft_living15 + sqft_lot15 + renovated, data = train)
summary(result)
test$predict <- round(predict(result, newdata = test) ^ 10)
test_mse_ln <- mean((test$price - test$predict)^2)
test_mse_ln
summary(result)$r.squared
summary(result)$adj.r.squared
PRESS <- function(linear.model) {
## get the residuals from the linear.model. ## extract hat from lm.influence to obtain the leverages
pr <- residuals(linear.model) / (1-lm.influence(linear.model)$hat)
## calculate the PRESS by squaring each term and adding them up
PRESS <- sum(pr ^ 2)
return(PRESS)
}
PRESS(result)
result <- lm(price ~ bedrooms + bathrooms + floors + waterfront + view + condition + grade + yr_built + sqft_living +
sqft_living15 + sqft_lot15 + renovated, data = train)
summary(result)
test$predict <- round(predict(result, newdata = test) ^ 10)
test_mse_ln <- mean((test$price - test$predict)^2)
test_mse_ln
summary(result)$r.squared
summary(result)$adj.r.squared
PRESS <- function(linear.model) {
## get the residuals from the linear.model. ## extract hat from lm.influence to obtain the leverages
pr <- residuals(linear.model) / (1-lm.influence(linear.model)$hat)
## calculate the PRESS by squaring each term and adding them up
PRESS <- sum(pr ^ 2)
return(PRESS)
}
PRESS(result)
##Find SST
anova_result<-anova(result)
SST<-sum(anova_result$"Sum Sq") ##R2 pred
Rsq_pred <- 1-PRESS(result)/SST
Rsq_pred
train <- train %>% mutate(price = price ^ 0.1)
result2 <- lm(price ~ bedrooms + bathrooms + floors + waterfront + view + condition + grade + yr_built + sqft_living +
sqft_living15 + sqft_lot15 + renovated, data = train)
summary(result2)
summary(result2)$r.squared
summary(result2)$adj.r.squared
PRESS(result2)
##Find SST
anova_result<-anova(result2)
SST<-sum(anova_result$"Sum Sq")
##R2 pred
Rsq_pred <- 1-PRESS(result2)/SST
Rsq_pred
result3 <- lm(price ~ bedrooms + bathrooms + floors + waterfront + view + condition + grade + yr_built + sqft_living +
sqft_living15 + sqft_lot15 + renovated, data = train2)
summary(result3)
test$predict <- round(predict(result2, newdata = test) ^ 10)
test_mse_ln_3 <- mean((test$price - test$predict)^2)
test_mse_ln_3
summary(result3)$r.squared
summary(result3)$adj.r.squared
PRESS(result3)
##Find SST
anova_result<-anova(result3)
SST<-sum(anova_result$"Sum Sq")
##R2 pred
Rsq_pred <- 1-PRESS(result3)/SST
Rsq_pred
yhat<-result3$fitted.values
res<-result3$residuals
Data<-data.frame(train2,yhat,res)
ggplot(Data, aes(x=yhat,y=res))+
geom_point()+
geom_hline(yintercept=0, color="red")+
labs(x="Fitted y",
y="Residuals",
title="Residual Plot")
acf(res)
qqnorm(res)
qqline(res, col="red")
